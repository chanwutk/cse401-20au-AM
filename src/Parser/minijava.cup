/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal CLASS, PUBLIC, STATIC, VOID, MAIN, STRING, EXTENDS, THIS, NEW, IF, ELSE, WHILE, RETURN, TRY, CATCH, EXCEPTION;

/* built-in types */
terminal BOOLEAN, INT;

/* built-in function */
terminal PRINT, LENGTH;

/* operators */
terminal PLUS, BECOMES;

terminal AND, LESS, MINUS, TIMES, DOT, NOT;

/* delimiters */
terminal LPAREN, RPAREN, SEMICOLON;

terminal LBRACKET, RBRACKET, LBRACKET_SQUARE, RBRACKET_SQUARE, COMMA;

/* boolean values */
terminal TRUE, FALSE;

/* identifiers */
terminal String IDENTIFIER;

/* digits */
terminal Integer DIGIT;

/* Nonterminals (constructed by parser): */

nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDecl ClassDeclaration;
nonterminal ClassDeclList ClassDeclarationList;
nonterminal VarDecl VarDeclaration;
nonterminal VarDeclList VarDeclarationList;
nonterminal MethodDecl MethodDeclaration;
nonterminal MethodDeclList MethodDeclarationList;
nonterminal Formal Formal;
nonterminal FormalList FormalList;
nonterminal FormalList NonEmptyFormalList;
nonterminal Type Type;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal StatementList NonEmptyStatementList;
nonterminal Exp Expression;
nonterminal Exp AtomicExpression;
nonterminal Identifier Identifier;
nonterminal ExpList ExpressionList;
nonterminal ExpList NonEmptyExpressionList;

/* Precedence declarations: */

precedence left AND;
precedence nonassoc LESS;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right NOT;

/* Productions: */

Program ::=
    MainClass:main ClassDeclarationList:classes {:
        classes.setLocation(classesxleft);
        RESULT = new Program(main, classes, mainxleft);
    :};

MainClass ::=
    CLASS:c Identifier:id LBRACKET PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET_SQUARE RBRACKET_SQUARE Identifier:args RPAREN LBRACKET Statement:body RBRACKET RBRACKET {:
        RESULT = new MainClass(id, args, body, cxleft);
    :};

ClassDeclaration ::=
    CLASS:c Identifier:cls LBRACKET VarDeclarationList:fields MethodDeclarationList:methods RBRACKET {:
        fields.setLocation(fieldsxleft);
        methods.setLocation(methodsxleft);
        RESULT = new ClassDeclSimple(cls, fields, methods, cxleft);
    :} |
    CLASS:c Identifier:cls EXTENDS Identifier:base LBRACKET VarDeclarationList:fields MethodDeclarationList:methods RBRACKET {:
        fields.setLocation(fieldsxleft);
        methods.setLocation(methodsxleft);
        RESULT = new ClassDeclExtends(cls, base, fields, methods, cxleft);
    :};

ClassDeclarationList ::=
    {:
        RESULT = new ClassDeclList(null);
    :} |
    ClassDeclarationList:classes ClassDeclaration:cls {:
        classes.add(cls);
        RESULT = classes;
    :};

VarDeclaration ::=
    Type:t Identifier:var SEMICOLON {:
        RESULT = new VarDecl(t, var, txleft);
    :};

VarDeclarationList ::=
    {:
        RESULT = new VarDeclList(null);
    :} |
    VarDeclarationList:vars VarDeclaration:var {:
        vars.add(var);
        RESULT = vars;
    :};

MethodDeclaration ::=
    PUBLIC:p Type:rt Identifier:id LPAREN FormalList:params RPAREN LBRACKET VarDeclarationList:vars StatementList:body RETURN Expression:rv SEMICOLON RBRACKET {:
        params.setLocation(paramsxleft);
        RESULT = new MethodDecl(rt, id, params, vars, body, rv, pxleft);
    :};

MethodDeclarationList ::=
    {:
        RESULT = new MethodDeclList(null);
    :} |
    MethodDeclarationList:methods MethodDeclaration:method {:
        methods.add(method);
        RESULT = methods;
    :};

Formal ::=
    Type:t Identifier:id {:
        RESULT = new Formal(t, id, txleft);
    :};

FormalList ::=
    {:
        RESULT = new FormalList(null);
    :} |
    NonEmptyFormalList:params {:
        RESULT = params;
    :};

NonEmptyFormalList ::=
    Formal:param {:
        FormalList params = new FormalList(null);
        params.add(param);
        RESULT = params;
    :} |
    NonEmptyFormalList:params COMMA Formal:param {:
        params.add(param);
        RESULT = params;
    :};

Type ::=
    INT:i LBRACKET_SQUARE RBRACKET_SQUARE {:
        RESULT = new IntArrayType(ixleft);
    :} |
    BOOLEAN:b {:
        RESULT = new BooleanType(bxleft);
    :} |
    INT:i {:
        RESULT = new IntegerType(ixleft);
    :} |
    IDENTIFIER:t {:
        RESULT = new IdentifierType(t, txleft);
    :};

Statement ::=
    LBRACKET:l StatementList:stmts RBRACKET {:
        stmts.setLocation(stmtsxleft);
        RESULT = new Block(stmts, lxleft);
    :} |
    IF:i LPAREN Expression:cond RPAREN Statement:b1 ELSE Statement:b2 {:
        RESULT = new If(cond, b1, b2, ixleft);
    :} |
    WHILE:w LPAREN Expression:cond RPAREN Statement:body {:
        RESULT = new While(cond, body, wxleft);
    :} |
    TRY:t LBRACKET StatementList:stmts1 RBRACKET CATCH LPAREN EXCEPTION Identifier:id RPAREN LBRACKET StatementList:stmts2 RBRACKET {:
        RESULT = new TryCatch(stmts1, id, stmts2, txleft);
    :} |
    PRINT:p LPAREN Expression:expr RPAREN SEMICOLON {:
        RESULT = new Print(expr, pxleft);
    :} |
    Identifier:id BECOMES Expression:value SEMICOLON {:
        RESULT = new Assign(id, value, idxleft);
    :} |
    Identifier:id LBRACKET_SQUARE Expression:index RBRACKET_SQUARE BECOMES Expression:value SEMICOLON {:
        RESULT = new ArrayAssign(id, index, value, idxleft);
    :};

StatementList ::=
    {:
        RESULT = new StatementList(null);
    :} |
    NonEmptyStatementList:stmts {:
        RESULT = stmts;
    :};

// Only concat statements onto non-empty statement list to avoid shift-reduce conflict with VarDeclarationList
NonEmptyStatementList ::=
    Statement:stmt {:
        StatementList stmts = new StatementList(null);
        stmts.add(stmt);
        RESULT = stmts;
    :} |
    NonEmptyStatementList:stmts Statement:stmt {:
        stmts.add(stmt);
        RESULT = stmts;
    :};

Identifier ::=
    IDENTIFIER:id {:
        RESULT = new Identifier(id, idxleft);
    :};

AtomicExpression ::=
    AtomicExpression:arr LBRACKET_SQUARE Expression:index RBRACKET_SQUARE {:
        RESULT = new ArrayLookup(arr, index, arrxleft);
    :} |
    AtomicExpression:arr DOT LENGTH {:
        RESULT = new ArrayLength(arr, arrxleft);
    :} |
    AtomicExpression:o DOT Identifier:m LPAREN ExpressionList:args RPAREN {:
        args.setLocation(argsxleft);
        RESULT = new Call(o, m, args, oxleft);
    :} |
    DIGIT:d {:
        RESULT = new IntegerLiteral(d, dxleft);
    :} |
    TRUE:t {:
        RESULT = new True(txleft);
    :} |
    FALSE:f {:
        RESULT = new False(fxleft);
    :} |
    IDENTIFIER:name {:
        RESULT = new IdentifierExp(name, namexleft);
    :} |
    THIS:t {:
        RESULT = new This(txleft);
    :} |
    NEW:n INT LBRACKET_SQUARE Expression:size RBRACKET_SQUARE {:
        RESULT = new NewArray(size, nxleft);
    :} |
    NEW:n Identifier:id LPAREN RPAREN {:
        RESULT = new NewObject(id, nxleft);
    :} |
    LPAREN Expression:expr RPAREN {:
        RESULT = expr;
    :};

Expression ::=
    AtomicExpression:expr {:
        RESULT = expr;
    :} |
    Expression:arg1 AND Expression:arg2 {:
        RESULT = new And(arg1, arg2, arg1xleft);
    :} |
    Expression:arg1 LESS Expression:arg2 {:
        RESULT = new LessThan(arg1, arg2, arg1xleft);
    :} |
    Expression:arg1 PLUS Expression:arg2 {:
        RESULT = new Plus(arg1, arg2, arg1xleft);
    :} |
    Expression:arg1 MINUS Expression:arg2 {:
        RESULT = new Minus(arg1, arg2, arg1xleft);
    :} |
    Expression:arg1 TIMES Expression:arg2 {:
        RESULT = new Times(arg1, arg2, arg1xleft);
    :} |
    NOT:n Expression:expr {:
        RESULT = new Not(expr, nxleft);
    :};

ExpressionList ::=
    {:
        RESULT = new ExpList(null);
    :} |
    NonEmptyExpressionList:exprs {:
        RESULT = exprs;
    :};

NonEmptyExpressionList ::=
    Expression:expr {:
        ExpList exprs = new ExpList(null);
        exprs.add(expr);
        RESULT = exprs;
    :} |
    NonEmptyExpressionList:exprs COMMA Expression:expr {:
        exprs.add(expr);
        RESULT = exprs;
    :};
