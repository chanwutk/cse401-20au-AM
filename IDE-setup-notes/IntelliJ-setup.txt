Staff 9/18, 9/19; HP 4/20

These are instructions for setting up the CSE 401/M501 project with
IntelliJ.  Although they have been verified to work with most setups
and IntelliJ versions, things can change and it is possible
you will find problems along the way.  Please report any issues you
discover to cse401-staff@cs.washington.edu so the course staff can
update these instructions for future quarters.  The course discussion
group is also a good place to exchange experiences and ideas with
others.

Two versions of the IntelliJ IDE are available: a free community one and
a licensed Ultimate version.  They should work equally well for CSE
401/M501 projects, but since educational users can obtain a free license
for the Ultimate one, most students have used that in recent quarters.


0. Clone your project team's GitLab repository into some convenient
location.  Initially it will contain the starter code for the project,
which you will modify and add to during the quarter.

1. BEFORE you start IntelliJ, open a command window, navigate to the
root folder of your cloned repository, and enter 'ant' (without the
quotes).  This should build the sample scanner and parser and compile
all of the Java files.  If this step doesn't work, fix it before
continuing.

2. Start IntelliJ and create a new project for MiniJava as follows.

a) WAIT: did you do the ant build in step 1, above?  If not, quit
IntelliJ and do that first.

b) From the IntelliJ starting screen, select "Import Project", then
browse to the MiniJava project folder root and select "Open".

c) IntelliJ will ask if you want to create the project from existing
sources or import it from an external model such as eclipse.  Select
"Create project from existing sources".

d) Use whatever name you want, keep the location as the default, and
click "Next".

e) IntelliJ should identify three source directories, in
"lib/cup-src", "src", and "test/junit".  Uncheck the checkbox next to
"lib/cup-src", but leave "src" and "test/junit" selected, then click "Next".

f) Leave the found libraries as the defaults on the next screen, and
click "Next".

g) Leave the module structure as the default, and click "Next".

h) The SDK should be 1.11 or 11. If you don't have that option, make
sure you have Java 11 installed (people have reported issues when
setting up this project with older versions of Java, particularly
versions older than Java 8).  More recent versions (e.g., Java 12)
should also be ok, but the 19au course staff will test your compiler
using Java 11, so you should be sure your project code does not
include any newer, incompatable language or library features.  Once
you have selected 11, click "Next".

i) IntelliJ will warn you that no frameworks were detected.  This is
expected; click "Finish" to complete set-up.

3. Once you've created the project, you will need to let IntelliJ know
what build file to use for ant tasks.  To do so, select View > Tool
Windows > Ant Build from the menu, and click the plus icon in the
upper left.  (If this menu item isn't visible, try restarting IntelliJ
and see if that fixes the problem.)  Select "build.xml" in the root of
the MiniJava project directory, and you should see a list of ant tasks
appear.  As an alternative to this step, you may find it effective to
simply use IntelliJ as an editor and run all ant tasks from the
command line.

PLEASE NOTE: For many people, IntelliJ shows the progress of the ant
task on the bottom bar but doesn't seem to produce any output.  If this
happens, select View > Tool Windows > Messages to view the result of the
most recently run ant task.

4. If you feel compelled to start tinkering with classpaths or other
IntelliJ options, please post a message to the class discussion board
describing the apparent problem and what you did to fix it.  That will
help all of us figure out how to get IntelliJ's internal build
machinery to play nice with the project.

One last (general) suggestion: If it seems that changes to your source
files are not properly reflected in your project, it may be that some
.class files are out of date and weren't recompiled when they should
have been.  (Shouldn't be possible, but it seems to happen
occasionally.)  If you suspect this to be the case, quit IntelliJ if
it is running, open a command window, navigate to the MiniJava folder,
then enter 'ant clean' followed by 'ant' to recompile everything.
